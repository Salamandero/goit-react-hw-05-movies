{"version":3,"file":"static/js/304.86f2f1f6.chunk.js","mappings":"sNAEaA,EAAOC,EAAAA,GAAAA,GAAH,mEAKJC,EAAOD,EAAAA,GAAAA,GAAH,6K,SCuBjB,EA1BkB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,SAACL,EAAD,UACGG,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACV,SAACP,EAAD,WACE,SAAC,KAAD,CAAMQ,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,gBACGI,QADH,IACGA,EAAAA,EAASC,KAFHF,EADD,OAUnB,C,0HCjBYM,E,QAAQZ,GAAAA,GAAH,mF,mBC+BlB,EA3Ba,WACX,OAA4Ba,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KASA,OARAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbE,EAAAA,EAAAA,KACGC,KAAKL,GACLM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,SAAQ,kBAAMR,GAAa,EAAnB,GACZ,GAAE,IAEEd,GAIH,gCACGa,IAAa,SAACU,EAAA,EAAD,IACbvB,EAAOwB,OAAS,IACf,iCACE,SAACd,EAAD,oCACA,SAACe,EAAA,EAAD,CAAWzB,OAAQA,UARlB,IAaV,C,kMC7BD0B,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGT,SAAeX,IAAtB,+B,aAAO,O,oBAAA,oGACaU,EAAAA,EAAAA,IAAA,qBAAgC,CAChDE,OAAQ,CACNC,QAASF,KAHR,cACCG,EADD,yBAMEA,EAAIC,KAAKC,SANX,kEAUA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAmCC,GAAnC,uFACaR,EAAAA,EAAAA,IAAA,gBAA2B,CAC3CE,OAAQ,CACNC,QAASF,EACTO,MAAOA,EACPC,KAAM,KALL,cACCL,EADD,yBAQEA,EAAIC,KAAKC,SARX,kEAYA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAAiCC,GAAjC,uFACaX,EAAAA,EAAAA,IAAA,iBAAoBW,GAAW,CAC/CT,OAAQ,CACNC,QAASF,KAHR,cACCG,EADD,yBAOEA,EAAIC,MAPN,kEAUA,SAAeO,EAAtB,kC,aAAO,O,oBAAA,WAAqCC,GAArC,uFACab,EAAAA,EAAAA,IAAA,iBAAoBa,EAApB,YAAwC,CACxDX,OAAQ,CACNC,QAASF,KAHR,cACCG,EADD,yBAOEA,EAAIC,KAAKS,MAPX,kEAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAwCF,GAAxC,uFACab,EAAAA,EAAAA,IAAA,iBAAoBa,EAApB,YAAwC,CACxDX,OAAQ,CACNC,QAASF,EACTQ,KAAM,KAJL,cACCL,EADD,yBAOEA,EAAIC,KAAKC,SAPX,kE","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  color: black;\n  text-decoration: none;\n`;\n\nexport const Item = styled.li`\n  a {\n    color: black;\n    text-decoration: none;\n  }\n  a:hover {\n    color: #ad00b5;\n    font-weight: 700;\n    text-decoration: none;\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { List, Item } from './MovieList.styled';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <List>\n        {movies.map(({ id, title, name }) => (\n          <Item key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title ?? name}\n            </Link>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ),\n};\nexport default MovieList;\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  border-bottom: 2px black solid;\n  padding-bottom: 8px;\n`;\n","import { fetchDBMoviesTrend } from 'services/api';\nimport { useState, useEffect } from 'react';\nimport Loader from '../../components/Loader/Loader';\nimport { Title } from './Home.styled';\nimport MovieList from '../../components/MovieList/MovieList';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    setIsLoading(true);\n    fetchDBMoviesTrend()\n      .then(setMovies)\n      .catch(error => console.log(error))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  if (!movies) {\n    return null;\n  }\n  return (\n    <>\n      {isLoading && <Loader />}\n      {movies.length > 0 && (\n        <>\n          <Title>Trending of the week</Title>\n          <MovieList movies={movies} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a147bcd1e0cbe82e9bf9de24930f8c06';\n\n//Trends\nexport async function fetchDBMoviesTrend() {\n  const res = await axios.get(`/trending/all/week`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return res.data.results;\n}\n\n//SearchQuery\nexport async function fetchDBMoviesSearch(query) {\n  const res = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: query,\n      page: 1,\n    },\n  });\n  return res.data.results;\n}\n\n//запит повної інформації про фільм для сторінки кінофільму.\nexport async function fetchDBMoviesInfo(movieId) {\n  const res = await axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return res.data;\n}\n//запит інформації про акторський склад для сторінки кінофільму.\nexport async function fetchDBMoviesInfoCast(movie_id) {\n  const res = await axios.get(`/movie/${movie_id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return res.data.cast;\n}\n// запит оглядів для сторінки кінофільму.\nexport async function fetchDBMoviesInfoReviews(movie_id) {\n  const res = await axios.get(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return res.data.results;\n}\n"],"names":["List","styled","Item","movies","location","useLocation","map","id","title","name","to","state","from","Title","useState","setMovies","isLoading","setIsLoading","useEffect","fetchDBMoviesTrend","then","catch","error","console","log","finally","Loader","length","MovieList","axios","API_KEY","params","api_key","res","data","results","fetchDBMoviesSearch","query","page","fetchDBMoviesInfo","movieId","fetchDBMoviesInfoCast","movie_id","cast","fetchDBMoviesInfoReviews"],"sourceRoot":""}
{"version":3,"file":"static/js/387.bda8453e.chunk.js","mappings":"iRAEaA,EAAYC,EAAAA,GAAAA,IAAH,iFAKTC,EAAcD,EAAAA,GAAAA,IAAH,4EAKXE,EAAWF,EAAAA,GAAAA,GAAH,wHAKRG,EAAWH,EAAAA,GAAAA,OAAH,0JAQRI,EAAUJ,EAAAA,GAAAA,IAAH,mG,SCoDpB,EAhEa,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAajB,OAZAC,EAAAA,EAAAA,YAAU,WACRP,GAAa,IACbQ,EAAAA,EAAAA,IAAsBZ,GACnBa,KAAKP,GACLQ,OAAM,SAAAP,GACLC,EACE,mFAEFO,QAAQC,IAAIT,EACb,IACAU,QAAQb,GAAa,GACzB,GAAE,CAACJ,IACCK,GAKH,gCACGF,IAAa,SAACe,EAAA,EAAD,IACbX,IAAS,UAACb,EAAD,WAAYa,EAAZ,QACW,IAAnBF,EAAQc,QAAmC,KAAnBd,EAAQc,UAChC,UAACvB,EAAD,YACE,SAACE,EAAD,CAAUsB,KAAK,SAASC,QAAS,kBAAMZ,GAAU,EAAhB,EAAjC,oBAGA,uEAGHJ,EAAQc,OAAS,IAChB,UAACvB,EAAD,YACE,SAACE,EAAD,CAAUsB,KAAK,SAASC,QAAS,kBAAMZ,GAAU,EAAhB,EAAjC,oBAIA,SAACZ,EAAD,UACGQ,EAAQiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACX,2BACE,SAAC3B,EAAD,CACE4B,IACED,EAAY,yCAC0BA,GAClCE,EAENC,IAAKL,EACLM,QAAQ,UAEV,uBAAIN,IACHC,IAAa,uCAAeA,OAXtBF,EADE,YAtBd,IA0CV,C,kMCzEDQ,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGT,SAAeC,IAAtB,+B,aAAO,O,oBAAA,oGACaF,EAAAA,EAAAA,IAAA,qBAAgC,CAChDG,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAMEA,EAAIC,KAAKC,SANX,kEAUA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAmCC,GAAnC,uFACaT,EAAAA,EAAAA,IAAA,gBAA2B,CAC3CG,OAAQ,CACNC,QAASH,EACTQ,MAAOA,EACPC,KAAM,KALL,cACCL,EADD,yBAQEA,EAAIC,KAAKC,SARX,kEAYA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAAiC1C,GAAjC,uFACa+B,EAAAA,EAAAA,IAAA,iBAAoB/B,GAAW,CAC/CkC,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAOEA,EAAIC,MAPN,kEAUA,SAAezB,EAAtB,kC,aAAO,O,oBAAA,WAAqC+B,GAArC,uFACaZ,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAwC,CACxDT,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAOEA,EAAIC,KAAKO,MAPX,kEAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAwCF,GAAxC,uFACaZ,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAwC,CACxDT,OAAQ,CACNC,QAASH,EACTS,KAAM,KAJL,cACCL,EADD,yBAOEA,EAAIC,KAAKC,SAPX,kE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorCast = styled.div`\n  display: flex;\n  margin: 0 auto;\n  font-size: 24px;\n`;\nexport const WrapperCast = styled.div`\n  border-top: 1px solid black;\n  margin-top: 8px;\n`;\n\nexport const ListCast = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n  gap: 8px;\n`;\nexport const CloseBtn = styled.button`\n  display: inline-block;\n  color: #fff;\n  border-radius: 4px;\n  margin: 8px 0;\n  padding: 4px;\n  background-color: #ad00b5;\n`;\nexport const ImgCast = styled.img`\n  display: block;\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n`;\n","import { fetchDBMoviesInfoCast } from 'services/api';\nimport { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Loader from '../Loader/Loader';\nimport noCastImg from '../../images/no_man.jpg';\nimport {\n  ErrorCast,\n  CloseBtn,\n  ListCast,\n  ImgCast,\n  WrapperCast,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [credits, setCredits] = useState([]);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    setIsLoading(true);\n    fetchDBMoviesInfoCast(movieId)\n      .then(setCredits)\n      .catch(error => {\n        setError(\n          'Our Minions have hands on other side and can`t find information about this film'\n        );\n        console.log(error);\n      })\n      .finally(setIsLoading(false));\n  }, [movieId]);\n  if (!credits) {\n    return null;\n  }\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <ErrorCast>{error} </ErrorCast>}\n      {(credits.length === 0 || credits.length === '') && (\n        <WrapperCast>\n          <CloseBtn type=\"button\" onClick={() => navigate(-1)}>\n            Close\n          </CloseBtn>\n          <p>We don`t have any reviews for this movie</p>\n        </WrapperCast>\n      )}\n      {credits.length > 0 && (\n        <WrapperCast>\n          <CloseBtn type=\"button\" onClick={() => navigate(-1)}>\n            Close\n          </CloseBtn>\n\n          <ListCast>\n            {credits.map(({ id, name, character, profile_path }) => (\n              <li key={id}>\n                <ImgCast\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w300${profile_path}`\n                      : noCastImg\n                  }\n                  alt={name}\n                  loading=\"lazy\"\n                />\n                <p>{name}</p>\n                {character && <p>Character: {character}</p>}\n              </li>\n            ))}\n          </ListCast>\n        </WrapperCast>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a147bcd1e0cbe82e9bf9de24930f8c06';\n\n//Trends\nexport async function fetchDBMoviesTrend() {\n  const res = await axios.get(`/trending/all/week`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return res.data.results;\n}\n\n//SearchQuery\nexport async function fetchDBMoviesSearch(query) {\n  const res = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: query,\n      page: 1,\n    },\n  });\n  return res.data.results;\n}\n\n//запит повної інформації про фільм для сторінки кінофільму.\nexport async function fetchDBMoviesInfo(movieId) {\n  const res = await axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return res.data;\n}\n//запит інформації про акторський склад для сторінки кінофільму.\nexport async function fetchDBMoviesInfoCast(movie_id) {\n  const res = await axios.get(`/movie/${movie_id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return res.data.cast;\n}\n// запит оглядів для сторінки кінофільму.\nexport async function fetchDBMoviesInfoReviews(movie_id) {\n  const res = await axios.get(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return res.data.results;\n}\n"],"names":["ErrorCast","styled","WrapperCast","ListCast","CloseBtn","ImgCast","movieId","useParams","useState","isLoading","setIsLoading","credits","setCredits","error","setError","navigate","useNavigate","useEffect","fetchDBMoviesInfoCast","then","catch","console","log","finally","Loader","length","type","onClick","map","id","name","character","profile_path","src","noCastImg","alt","loading","axios","API_KEY","fetchDBMoviesTrend","params","api_key","res","data","results","fetchDBMoviesSearch","query","page","fetchDBMoviesInfo","movie_id","cast","fetchDBMoviesInfoReviews"],"sourceRoot":""}
{"version":3,"file":"static/js/779.afe06de8.chunk.js","mappings":"qQAEaA,EAAeC,EAAAA,GAAAA,IAAH,iFAMZC,EAAWD,EAAAA,GAAAA,OAAH,0JAQRE,EAAiBF,EAAAA,GAAAA,IAAH,4EAIdG,EAAOH,EAAAA,GAAAA,GAAH,8E,SCwCjB,EAtDgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAajB,OAZAC,EAAAA,EAAAA,YAAU,WACRP,GAAa,IACbQ,EAAAA,EAAAA,IAAyBZ,GACtBa,KAAKP,GACLQ,OAAM,SAAAP,GACLC,EACE,mFAEFO,QAAQC,IAAIT,EACb,IACAU,QAAQb,GAAa,GACzB,GAAE,CAACJ,IACCK,GAKH,gCACGF,IAAa,SAACe,EAAA,EAAD,IACbX,IAAS,UAACZ,EAAD,WAAeY,EAAf,QACW,IAAnBF,EAAQc,QAAmC,KAAnBd,EAAQc,UAChC,UAACrB,EAAD,YACE,SAACD,EAAD,CAAUuB,KAAK,SAASC,QAAS,kBAAMZ,GAAU,EAAhB,EAAjC,oBAGA,uEAGHJ,EAAQc,OAAS,IAChB,UAACrB,EAAD,YACE,SAACD,EAAD,CAAUuB,KAAK,SAASC,QAAS,kBAAMZ,GAAU,EAAhB,EAAjC,oBAGA,wBACGJ,EAAQiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAAC1B,EAAD,YACE,qCAAayB,MACb,uBAAIC,MAFKF,EADA,YArBd,IAgCV,C,kMCxDDG,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGT,SAAeC,IAAtB,+B,aAAO,O,oBAAA,oGACaF,EAAAA,EAAAA,IAAA,qBAAgC,CAChDG,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAMEA,EAAIC,KAAKC,SANX,kEAUA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAmCC,GAAnC,uFACaT,EAAAA,EAAAA,IAAA,gBAA2B,CAC3CG,OAAQ,CACNC,QAASH,EACTQ,MAAOA,EACPC,KAAM,KALL,cACCL,EADD,yBAQEA,EAAIC,KAAKC,SARX,kEAYA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAAiCrC,GAAjC,uFACa0B,EAAAA,EAAAA,IAAA,iBAAoB1B,GAAW,CAC/C6B,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAOEA,EAAIC,MAPN,kEAUA,SAAeM,EAAtB,kC,aAAO,O,oBAAA,WAAqCC,GAArC,uFACab,EAAAA,EAAAA,IAAA,iBAAoBa,EAApB,YAAwC,CACxDV,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAOEA,EAAIC,KAAKQ,MAPX,kEAUA,SAAe5B,EAAtB,+CAAO,OAAP,oBAAO,WAAwC2B,GAAxC,uFACab,EAAAA,EAAAA,IAAA,iBAAoBa,EAApB,YAAwC,CACxDV,OAAQ,CACNC,QAASH,EACTS,KAAM,KAJL,cACCL,EADD,yBAOEA,EAAIC,KAAKC,SAPX,kE","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorReviews = styled.div`\n  display: flex;\n  margin: 0 auto;\n  font-size: 24px;\n`;\n\nexport const CloseBtn = styled.button`\n  display: inline-block;\n  color: #fff;\n  border-radius: 4px;\n  margin: 8px 0;\n  padding: 4px;\n  background-color: #ad00b5;\n`;\nexport const WrapperReviews = styled.div`\n  border-top: 1px solid black;\n  margin-top: 8px;\n`;\nexport const Item = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import { fetchDBMoviesInfoReviews } from 'services/api';\nimport { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Loader from '../Loader/Loader';\nimport { ErrorReviews, CloseBtn, Item, WrapperReviews } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    setIsLoading(true);\n    fetchDBMoviesInfoReviews(movieId)\n      .then(setReviews)\n      .catch(error => {\n        setError(\n          'Our Minions have hands on other side and can`t find information about this film'\n        );\n        console.log(error);\n      })\n      .finally(setIsLoading(false));\n  }, [movieId]);\n  if (!reviews) {\n    return null;\n  }\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <ErrorReviews>{error} </ErrorReviews>}\n      {(reviews.length === 0 || reviews.length === '') && (\n        <WrapperReviews>\n          <CloseBtn type=\"button\" onClick={() => navigate(-1)}>\n            Close\n          </CloseBtn>\n          <p>We don`t have any reviews for this movie</p>\n        </WrapperReviews>\n      )}\n      {reviews.length > 0 && (\n        <WrapperReviews>\n          <CloseBtn type=\"button\" onClick={() => navigate(-1)}>\n            Close\n          </CloseBtn>\n          <ul>\n            {reviews.map(({ id, author, content }) => (\n              <Item key={id}>\n                <h4>Author: {author}</h4>\n                <p>{content}</p>\n              </Item>\n            ))}\n          </ul>\n        </WrapperReviews>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a147bcd1e0cbe82e9bf9de24930f8c06';\n\n//Trends\nexport async function fetchDBMoviesTrend() {\n  const res = await axios.get(`/trending/all/week`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return res.data.results;\n}\n\n//SearchQuery\nexport async function fetchDBMoviesSearch(query) {\n  const res = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: query,\n      page: 1,\n    },\n  });\n  return res.data.results;\n}\n\n//запит повної інформації про фільм для сторінки кінофільму.\nexport async function fetchDBMoviesInfo(movieId) {\n  const res = await axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return res.data;\n}\n//запит інформації про акторський склад для сторінки кінофільму.\nexport async function fetchDBMoviesInfoCast(movie_id) {\n  const res = await axios.get(`/movie/${movie_id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return res.data.cast;\n}\n// запит оглядів для сторінки кінофільму.\nexport async function fetchDBMoviesInfoReviews(movie_id) {\n  const res = await axios.get(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return res.data.results;\n}\n"],"names":["ErrorReviews","styled","CloseBtn","WrapperReviews","Item","movieId","useParams","useState","isLoading","setIsLoading","reviews","setReviews","error","setError","navigate","useNavigate","useEffect","fetchDBMoviesInfoReviews","then","catch","console","log","finally","Loader","length","type","onClick","map","id","author","content","axios","API_KEY","fetchDBMoviesTrend","params","api_key","res","data","results","fetchDBMoviesSearch","query","page","fetchDBMoviesInfo","fetchDBMoviesInfoCast","movie_id","cast"],"sourceRoot":""}